<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */


class cmt_CommentInfo {
  static $_TSPEC;

  public $comment = null;
  public $title = null;
  public $tags = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
    }
  }

  public function getName() {
    return 'CommentInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $len = unpack('N', $input->readAll(4));
            $len = $len[1];
            if ($len > 0x7fffffff) {
              $len = 0 - (($len - 1) ^ 0xffffffff);
            }
            $this->comment = $input->readAll($len);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $len = unpack('N', $input->readAll(4));
            $len = $len[1];
            if ($len > 0x7fffffff) {
              $len = 0 - (($len - 1) ^ 0xffffffff);
            }
            $this->title = $input->readAll($len);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->tags = array();
            $_size0 = 0;
            $_etype3 = unpack('c', $input->readAll(1));
            $_etype3 = $_etype3[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size0 = $val;
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $len = unpack('N', $input->readAll(4));
              $len = $len[1];
              if ($len > 0x7fffffff) {
                $len = 0 - (($len - 1) ^ 0xffffffff);
              }
              $elem5 = $input->readAll($len);
              $this->tags []= $elem5;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->comment !== null) {
      $output .= pack('c', TType::STRING);
      $output .= pack('n', 1);
      $output .= pack('N', strlen($this->comment));
      $output .= $this->comment;
    }
    if ($this->title !== null) {
      $output .= pack('c', TType::STRING);
      $output .= pack('n', 2);
      $output .= pack('N', strlen($this->title));
      $output .= $this->title;
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 3);
      {
        $output .= pack('c', TType::STRING);
        $output .= strrev(pack('l', count($this->tags)));
        {
          foreach ($this->tags as $iter6)
          {
            $output .= pack('N', strlen($iter6));
            $output .= $iter6;
          }
        }
      }
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}


