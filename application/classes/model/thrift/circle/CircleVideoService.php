<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once __DIR__ . '/CircleVideoService_types.php';

interface CircleVideoServiceIf {
  public function search($circle_id, $circle_title, $ranking, $tags, $isDebug);
}

class CircleVideoServiceClient implements CircleVideoServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function search($circle_id, $circle_title, $ranking, $tags, $isDebug)
  {
    $this->send_search($circle_id, $circle_title, $ranking, $tags, $isDebug);
    return $this->recv_search();
  }

  public function send_search($circle_id, $circle_title, $ranking, $tags, $isDebug)
  {
    $args = new CircleVideoService_search_args();
    $args->circle_id = $circle_id;
    $args->circle_title = $circle_title;
    $args->ranking = $ranking;
    $args->tags = $tags;
    $args->isDebug = $isDebug;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('search'));
      $buff .= 'search';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_search()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'CircleVideoService_search_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new CircleVideoService_search_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("search failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class CircleVideoService_search_args {
  static $_TSPEC;

  public $circle_id = null;
  public $circle_title = null;
  public $ranking = null;
  public $tags = null;
  public $isDebug = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'circle_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'circle_title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ranking',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'isDebug',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['circle_id'])) {
        $this->circle_id = $vals['circle_id'];
      }
      if (isset($vals['circle_title'])) {
        $this->circle_title = $vals['circle_title'];
      }
      if (isset($vals['ranking'])) {
        $this->ranking = $vals['ranking'];
      }
      if (isset($vals['tags'])) {
        $this->tags = $vals['tags'];
      }
      if (isset($vals['isDebug'])) {
        $this->isDebug = $vals['isDebug'];
      }
    }
  }

  public function getName() {
    return 'CircleVideoService_search_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->circle_id = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $len = unpack('N', $input->readAll(4));
            $len = $len[1];
            if ($len > 0x7fffffff) {
              $len = 0 - (($len - 1) ^ 0xffffffff);
            }
            $this->circle_title = $input->readAll($len);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->ranking = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->tags = array();
            $_size0 = 0;
            $_etype3 = unpack('c', $input->readAll(1));
            $_etype3 = $_etype3[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size0 = $val;
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $len = unpack('N', $input->readAll(4));
              $len = $len[1];
              if ($len > 0x7fffffff) {
                $len = 0 - (($len - 1) ^ 0xffffffff);
              }
              $elem5 = $input->readAll($len);
              $this->tags []= $elem5;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $this->isDebug = unpack('c', $input->readAll(1));
            $this->isDebug = (bool)$this->isDebug[1];
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->circle_id !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 1);
      $output .= pack('N', $this->circle_id);
    }
    if ($this->circle_title !== null) {
      $output .= pack('c', TType::STRING);
      $output .= pack('n', 2);
      $output .= pack('N', strlen($this->circle_title));
      $output .= $this->circle_title;
    }
    if ($this->ranking !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 3);
      $output .= pack('N', $this->ranking);
    }
    if ($this->tags !== null) {
      if (!is_array($this->tags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 4);
      {
        $output .= pack('c', TType::STRING);
        $output .= strrev(pack('l', count($this->tags)));
        {
          foreach ($this->tags as $iter6)
          {
            $output .= pack('N', strlen($iter6));
            $output .= $iter6;
          }
        }
      }
    }
    if ($this->isDebug !== null) {
      $output .= pack('c', TType::BOOL);
      $output .= pack('n', 5);
      $output .= pack('c', $this->isDebug ? 1 : 0);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class CircleVideoService_search_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CircleVideoService_search_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size7 = 0;
            $_etype10 = unpack('c', $input->readAll(1));
            $_etype10 = $_etype10[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size7 = $val;
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $len = unpack('N', $input->readAll(4));
              $len = $len[1];
              if ($len > 0x7fffffff) {
                $len = 0 - (($len - 1) ^ 0xffffffff);
              }
              $elem12 = $input->readAll($len);
              $this->success []= $elem12;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 0);
      {
        $output .= pack('c', TType::STRING);
        $output .= strrev(pack('l', count($this->success)));
        {
          foreach ($this->success as $iter13)
          {
            $output .= pack('N', strlen($iter13));
            $output .= $iter13;
          }
        }
      }
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}


