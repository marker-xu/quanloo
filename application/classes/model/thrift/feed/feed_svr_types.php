<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

class feed_FeedInfo {
  static $_TSPEC;

  public $nRepostCount = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nRepostCount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nRepostCount'])) {
        $this->nRepostCount = $vals['nRepostCount'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'FeedInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nRepostCount = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $len = unpack('N', $input->readAll(4));
            $len = $len[1];
            if ($len > 0x7fffffff) {
              $len = 0 - (($len - 1) ^ 0xffffffff);
            }
            $this->content = $input->readAll($len);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->nRepostCount !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 1);
      $output .= pack('N', $this->nRepostCount);
    }
    if ($this->content !== null) {
      $output .= pack('c', TType::STRING);
      $output .= pack('n', 2);
      $output .= pack('N', strlen($this->content));
      $output .= $this->content;
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_FeedResult {
  static $_TSPEC;

  public $nRetCode = null;
  public $feed_id_lst = null;
  public $feed_content_map = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nRetCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'feed_id_lst',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'feed_content_map',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'feed_FeedInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nRetCode'])) {
        $this->nRetCode = $vals['nRetCode'];
      }
      if (isset($vals['feed_id_lst'])) {
        $this->feed_id_lst = $vals['feed_id_lst'];
      }
      if (isset($vals['feed_content_map'])) {
        $this->feed_content_map = $vals['feed_content_map'];
      }
    }
  }

  public function getName() {
    return 'FeedResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nRetCode = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->feed_id_lst = array();
            $_size0 = 0;
            $_etype3 = unpack('c', $input->readAll(1));
            $_etype3 = $_etype3[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size0 = $val;
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $arr = unpack('N2', $input->readAll(8));
              if ($arr[1] & 0x80000000) {
                $arr[1] = $arr[1] ^ 0xFFFFFFFF;
                $arr[2] = $arr[2] ^ 0xFFFFFFFF;
                $elem5 = 0 - $arr[1]*4294967296 - $arr[2] - 1;
              } else {
                $elem5 = $arr[1]*4294967296 + $arr[2];
              }
              $this->feed_id_lst []= $elem5;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->feed_content_map = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $_ktype7 = unpack('c', $input->readAll(1));
            $_ktype7 = $_ktype7[1];
            $_vtype8 = unpack('c', $input->readAll(1));
            $_vtype8 = $_vtype8[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size6 = $val;
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $key11 = 0;
              $val12 = new feed_FeedInfo();
              $arr = unpack('N2', $input->readAll(8));
              if ($arr[1] & 0x80000000) {
                $arr[1] = $arr[1] ^ 0xFFFFFFFF;
                $arr[2] = $arr[2] ^ 0xFFFFFFFF;
                $key11 = 0 - $arr[1]*4294967296 - $arr[2] - 1;
              } else {
                $key11 = $arr[1]*4294967296 + $arr[2];
              }
              $val12 = new feed_FeedInfo();
              $xfer += $val12->read($input);
              $this->feed_content_map[$key11] = $val12;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->nRetCode !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 1);
      $output .= pack('N', $this->nRetCode);
    }
    if ($this->feed_id_lst !== null) {
      if (!is_array($this->feed_id_lst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 2);
      {
        $output .= pack('c', TType::I64);
        $output .= strrev(pack('l', count($this->feed_id_lst)));
        {
          foreach ($this->feed_id_lst as $iter13)
          {
            $output .= pack('N2', $iter13 >> 32, $iter13 & 0xFFFFFFFF);
          }
        }
      }
    }
    if ($this->feed_content_map !== null) {
      if (!is_array($this->feed_content_map)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::MAP);
      $output .= pack('n', 3);
      {
        $output .= pack('c', TType::I64);
        $output .= pack('c', TType::STRUCT);
        $output .= strrev(pack('l', count($this->feed_content_map)));
        {
          foreach ($this->feed_content_map as $kiter14 => $viter15)
          {
            $output .= pack('N2', $kiter14 >> 32, $kiter14 & 0xFFFFFFFF);
            $xfer += $viter15->write($output);
          }
        }
      }
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_RecommVideo {
  static $_TSPEC;

  public $nRetCode = null;
  public $vid_lst = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nRetCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'vid_lst',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nRetCode'])) {
        $this->nRetCode = $vals['nRetCode'];
      }
      if (isset($vals['vid_lst'])) {
        $this->vid_lst = $vals['vid_lst'];
      }
    }
  }

  public function getName() {
    return 'RecommVideo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nRetCode = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->vid_lst = array();
            $_size16 = 0;
            $_etype19 = unpack('c', $input->readAll(1));
            $_etype19 = $_etype19[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size16 = $val;
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $len = unpack('N', $input->readAll(4));
              $len = $len[1];
              if ($len > 0x7fffffff) {
                $len = 0 - (($len - 1) ^ 0xffffffff);
              }
              $elem21 = $input->readAll($len);
              $this->vid_lst []= $elem21;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->nRetCode !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 1);
      $output .= pack('N', $this->nRetCode);
    }
    if ($this->vid_lst !== null) {
      if (!is_array($this->vid_lst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 2);
      {
        $output .= pack('c', TType::STRING);
        $output .= strrev(pack('l', count($this->vid_lst)));
        {
          foreach ($this->vid_lst as $iter22)
          {
            $output .= pack('N', strlen($iter22));
            $output .= $iter22;
          }
        }
      }
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}


