<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once __DIR__ . '/feed_svr_types.php';

interface feed_feed_serviceIf {
  public function get_feeds($circleLst, $userLst, $nOffset, $nGetFeedNm, $nLastTime, $filterFlag, $rid);
  public function new_feeds_nm($circleLst, $userLst, $nTime, $filterFlag, $rid);
  public function get_feeds_info($msgidLst);
  public function get_circle_update_feeds($circleLst, $noffset, $nGetFeedNm, $nLastTime, $rid);
  public function del_feed($msgid);
  public function get_recomm($uid, $circleLst, $userLst, $nOffset, $nLastTime);
}

class feed_feed_serviceClient implements feed_feed_serviceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function get_feeds($circleLst, $userLst, $nOffset, $nGetFeedNm, $nLastTime, $filterFlag, $rid)
  {
    $this->send_get_feeds($circleLst, $userLst, $nOffset, $nGetFeedNm, $nLastTime, $filterFlag, $rid);
    return $this->recv_get_feeds();
  }

  public function send_get_feeds($circleLst, $userLst, $nOffset, $nGetFeedNm, $nLastTime, $filterFlag, $rid)
  {
    $args = new feed_feed_service_get_feeds_args();
    $args->circleLst = $circleLst;
    $args->userLst = $userLst;
    $args->nOffset = $nOffset;
    $args->nGetFeedNm = $nGetFeedNm;
    $args->nLastTime = $nLastTime;
    $args->filterFlag = $filterFlag;
    $args->rid = $rid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_feeds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('get_feeds'));
      $buff .= 'get_feeds';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_get_feeds()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_feed_service_get_feeds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new feed_feed_service_get_feeds_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("get_feeds failed: unknown result");
  }

  public function new_feeds_nm($circleLst, $userLst, $nTime, $filterFlag, $rid)
  {
    $this->send_new_feeds_nm($circleLst, $userLst, $nTime, $filterFlag, $rid);
    return $this->recv_new_feeds_nm();
  }

  public function send_new_feeds_nm($circleLst, $userLst, $nTime, $filterFlag, $rid)
  {
    $args = new feed_feed_service_new_feeds_nm_args();
    $args->circleLst = $circleLst;
    $args->userLst = $userLst;
    $args->nTime = $nTime;
    $args->filterFlag = $filterFlag;
    $args->rid = $rid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'new_feeds_nm', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('new_feeds_nm'));
      $buff .= 'new_feeds_nm';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_new_feeds_nm()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_feed_service_new_feeds_nm_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new feed_feed_service_new_feeds_nm_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("new_feeds_nm failed: unknown result");
  }

  public function get_feeds_info($msgidLst)
  {
    $this->send_get_feeds_info($msgidLst);
    return $this->recv_get_feeds_info();
  }

  public function send_get_feeds_info($msgidLst)
  {
    $args = new feed_feed_service_get_feeds_info_args();
    $args->msgidLst = $msgidLst;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_feeds_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('get_feeds_info'));
      $buff .= 'get_feeds_info';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_get_feeds_info()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_feed_service_get_feeds_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new feed_feed_service_get_feeds_info_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("get_feeds_info failed: unknown result");
  }

  public function get_circle_update_feeds($circleLst, $noffset, $nGetFeedNm, $nLastTime, $rid)
  {
    $this->send_get_circle_update_feeds($circleLst, $noffset, $nGetFeedNm, $nLastTime, $rid);
    return $this->recv_get_circle_update_feeds();
  }

  public function send_get_circle_update_feeds($circleLst, $noffset, $nGetFeedNm, $nLastTime, $rid)
  {
    $args = new feed_feed_service_get_circle_update_feeds_args();
    $args->circleLst = $circleLst;
    $args->noffset = $noffset;
    $args->nGetFeedNm = $nGetFeedNm;
    $args->nLastTime = $nLastTime;
    $args->rid = $rid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_circle_update_feeds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('get_circle_update_feeds'));
      $buff .= 'get_circle_update_feeds';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_get_circle_update_feeds()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_feed_service_get_circle_update_feeds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new feed_feed_service_get_circle_update_feeds_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("get_circle_update_feeds failed: unknown result");
  }

  public function del_feed($msgid)
  {
    $this->send_del_feed($msgid);
    return $this->recv_del_feed();
  }

  public function send_del_feed($msgid)
  {
    $args = new feed_feed_service_del_feed_args();
    $args->msgid = $msgid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'del_feed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('del_feed'));
      $buff .= 'del_feed';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_del_feed()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_feed_service_del_feed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new feed_feed_service_del_feed_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("del_feed failed: unknown result");
  }

  public function get_recomm($uid, $circleLst, $userLst, $nOffset, $nLastTime)
  {
    $this->send_get_recomm($uid, $circleLst, $userLst, $nOffset, $nLastTime);
    return $this->recv_get_recomm();
  }

  public function send_get_recomm($uid, $circleLst, $userLst, $nOffset, $nLastTime)
  {
    $args = new feed_feed_service_get_recomm_args();
    $args->uid = $uid;
    $args->circleLst = $circleLst;
    $args->userLst = $userLst;
    $args->nOffset = $nOffset;
    $args->nLastTime = $nLastTime;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_recomm', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('get_recomm'));
      $buff .= 'get_recomm';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_get_recomm()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'feed_feed_service_get_recomm_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new feed_feed_service_get_recomm_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("get_recomm failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class feed_feed_service_get_feeds_args {
  static $_TSPEC;

  public $circleLst = null;
  public $userLst = null;
  public $nOffset = null;
  public $nGetFeedNm = null;
  public $nLastTime = null;
  public $filterFlag = null;
  public $rid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'circleLst',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'userLst',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'nOffset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nGetFeedNm',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'nLastTime',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'filterFlag',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'rid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['circleLst'])) {
        $this->circleLst = $vals['circleLst'];
      }
      if (isset($vals['userLst'])) {
        $this->userLst = $vals['userLst'];
      }
      if (isset($vals['nOffset'])) {
        $this->nOffset = $vals['nOffset'];
      }
      if (isset($vals['nGetFeedNm'])) {
        $this->nGetFeedNm = $vals['nGetFeedNm'];
      }
      if (isset($vals['nLastTime'])) {
        $this->nLastTime = $vals['nLastTime'];
      }
      if (isset($vals['filterFlag'])) {
        $this->filterFlag = $vals['filterFlag'];
      }
      if (isset($vals['rid'])) {
        $this->rid = $vals['rid'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_feeds_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->circleLst = array();
            $_size23 = 0;
            $_etype26 = unpack('c', $input->readAll(1));
            $_etype26 = $_etype26[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size23 = $val;
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $val = unpack('N', $input->readAll(4));
              $val = $val[1];
              if ($val > 0x7fffffff) {
                $val = 0 - (($val - 1) ^ 0xffffffff);
              }
              $elem28 = $val;
              $this->circleLst []= $elem28;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->userLst = array();
            $_size29 = 0;
            $_etype32 = unpack('c', $input->readAll(1));
            $_etype32 = $_etype32[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size29 = $val;
            for ($_i33 = 0; $_i33 < $_size29; ++$_i33)
            {
              $elem34 = null;
              $arr = unpack('N2', $input->readAll(8));
              if ($arr[1] & 0x80000000) {
                $arr[1] = $arr[1] ^ 0xFFFFFFFF;
                $arr[2] = $arr[2] ^ 0xFFFFFFFF;
                $elem34 = 0 - $arr[1]*4294967296 - $arr[2] - 1;
              } else {
                $elem34 = $arr[1]*4294967296 + $arr[2];
              }
              $this->userLst []= $elem34;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nOffset = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nGetFeedNm = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nLastTime = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->filterFlag = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->filterFlag = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->rid = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->rid = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->circleLst !== null) {
      if (!is_array($this->circleLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 1);
      {
        $output .= pack('c', TType::I32);
        $output .= strrev(pack('l', count($this->circleLst)));
        {
          foreach ($this->circleLst as $iter35)
          {
            $output .= pack('N', $iter35);
          }
        }
      }
    }
    if ($this->userLst !== null) {
      if (!is_array($this->userLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 2);
      {
        $output .= pack('c', TType::I64);
        $output .= strrev(pack('l', count($this->userLst)));
        {
          foreach ($this->userLst as $iter36)
          {
            $output .= pack('N2', $iter36 >> 32, $iter36 & 0xFFFFFFFF);
          }
        }
      }
    }
    if ($this->nOffset !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 3);
      $output .= pack('N', $this->nOffset);
    }
    if ($this->nGetFeedNm !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 4);
      $output .= pack('N', $this->nGetFeedNm);
    }
    if ($this->nLastTime !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 5);
      $output .= pack('N', $this->nLastTime);
    }
    if ($this->filterFlag !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 6);
      $output .= pack('N2', $this->filterFlag >> 32, $this->filterFlag & 0xFFFFFFFF);
    }
    if ($this->rid !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 7);
      $output .= pack('N2', $this->rid >> 32, $this->rid & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_get_feeds_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'feed_FeedResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_feeds_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new feed_FeedResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::STRUCT);
      $output .= pack('n', 0);
      $xfer += $this->success->write($output);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_new_feeds_nm_args {
  static $_TSPEC;

  public $circleLst = null;
  public $userLst = null;
  public $nTime = null;
  public $filterFlag = null;
  public $rid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'circleLst',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'userLst',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'nTime',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'filterFlag',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'rid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['circleLst'])) {
        $this->circleLst = $vals['circleLst'];
      }
      if (isset($vals['userLst'])) {
        $this->userLst = $vals['userLst'];
      }
      if (isset($vals['nTime'])) {
        $this->nTime = $vals['nTime'];
      }
      if (isset($vals['filterFlag'])) {
        $this->filterFlag = $vals['filterFlag'];
      }
      if (isset($vals['rid'])) {
        $this->rid = $vals['rid'];
      }
    }
  }

  public function getName() {
    return 'feed_service_new_feeds_nm_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->circleLst = array();
            $_size37 = 0;
            $_etype40 = unpack('c', $input->readAll(1));
            $_etype40 = $_etype40[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size37 = $val;
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $val = unpack('N', $input->readAll(4));
              $val = $val[1];
              if ($val > 0x7fffffff) {
                $val = 0 - (($val - 1) ^ 0xffffffff);
              }
              $elem42 = $val;
              $this->circleLst []= $elem42;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->userLst = array();
            $_size43 = 0;
            $_etype46 = unpack('c', $input->readAll(1));
            $_etype46 = $_etype46[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size43 = $val;
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $elem48 = null;
              $arr = unpack('N2', $input->readAll(8));
              if ($arr[1] & 0x80000000) {
                $arr[1] = $arr[1] ^ 0xFFFFFFFF;
                $arr[2] = $arr[2] ^ 0xFFFFFFFF;
                $elem48 = 0 - $arr[1]*4294967296 - $arr[2] - 1;
              } else {
                $elem48 = $arr[1]*4294967296 + $arr[2];
              }
              $this->userLst []= $elem48;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nTime = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->filterFlag = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->filterFlag = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->rid = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->rid = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->circleLst !== null) {
      if (!is_array($this->circleLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 1);
      {
        $output .= pack('c', TType::I32);
        $output .= strrev(pack('l', count($this->circleLst)));
        {
          foreach ($this->circleLst as $iter49)
          {
            $output .= pack('N', $iter49);
          }
        }
      }
    }
    if ($this->userLst !== null) {
      if (!is_array($this->userLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 2);
      {
        $output .= pack('c', TType::I64);
        $output .= strrev(pack('l', count($this->userLst)));
        {
          foreach ($this->userLst as $iter50)
          {
            $output .= pack('N2', $iter50 >> 32, $iter50 & 0xFFFFFFFF);
          }
        }
      }
    }
    if ($this->nTime !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 3);
      $output .= pack('N', $this->nTime);
    }
    if ($this->filterFlag !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 4);
      $output .= pack('N2', $this->filterFlag >> 32, $this->filterFlag & 0xFFFFFFFF);
    }
    if ($this->rid !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 5);
      $output .= pack('N2', $this->rid >> 32, $this->rid & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_new_feeds_nm_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'feed_service_new_feeds_nm_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->success = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 0);
      $output .= pack('N', $this->success);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_get_feeds_info_args {
  static $_TSPEC;

  public $msgidLst = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgidLst',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgidLst'])) {
        $this->msgidLst = $vals['msgidLst'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_feeds_info_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->msgidLst = array();
            $_size51 = 0;
            $_etype54 = unpack('c', $input->readAll(1));
            $_etype54 = $_etype54[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size51 = $val;
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $elem56 = null;
              $arr = unpack('N2', $input->readAll(8));
              if ($arr[1] & 0x80000000) {
                $arr[1] = $arr[1] ^ 0xFFFFFFFF;
                $arr[2] = $arr[2] ^ 0xFFFFFFFF;
                $elem56 = 0 - $arr[1]*4294967296 - $arr[2] - 1;
              } else {
                $elem56 = $arr[1]*4294967296 + $arr[2];
              }
              $this->msgidLst []= $elem56;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->msgidLst !== null) {
      if (!is_array($this->msgidLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 1);
      {
        $output .= pack('c', TType::I64);
        $output .= strrev(pack('l', count($this->msgidLst)));
        {
          foreach ($this->msgidLst as $iter57)
          {
            $output .= pack('N2', $iter57 >> 32, $iter57 & 0xFFFFFFFF);
          }
        }
      }
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_get_feeds_info_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'feed_FeedInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_feeds_info_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size58 = 0;
            $_ktype59 = 0;
            $_vtype60 = 0;
            $_ktype59 = unpack('c', $input->readAll(1));
            $_ktype59 = $_ktype59[1];
            $_vtype60 = unpack('c', $input->readAll(1));
            $_vtype60 = $_vtype60[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size58 = $val;
            for ($_i62 = 0; $_i62 < $_size58; ++$_i62)
            {
              $key63 = 0;
              $val64 = new feed_FeedInfo();
              $arr = unpack('N2', $input->readAll(8));
              if ($arr[1] & 0x80000000) {
                $arr[1] = $arr[1] ^ 0xFFFFFFFF;
                $arr[2] = $arr[2] ^ 0xFFFFFFFF;
                $key63 = 0 - $arr[1]*4294967296 - $arr[2] - 1;
              } else {
                $key63 = $arr[1]*4294967296 + $arr[2];
              }
              $val64 = new feed_FeedInfo();
              $xfer += $val64->read($input);
              $this->success[$key63] = $val64;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::MAP);
      $output .= pack('n', 0);
      {
        $output .= pack('c', TType::I64);
        $output .= pack('c', TType::STRUCT);
        $output .= strrev(pack('l', count($this->success)));
        {
          foreach ($this->success as $kiter65 => $viter66)
          {
            $output .= pack('N2', $kiter65 >> 32, $kiter65 & 0xFFFFFFFF);
            $xfer += $viter66->write($output);
          }
        }
      }
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_get_circle_update_feeds_args {
  static $_TSPEC;

  public $circleLst = null;
  public $noffset = null;
  public $nGetFeedNm = null;
  public $nLastTime = null;
  public $rid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'circleLst',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'noffset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'nGetFeedNm',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nLastTime',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'rid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['circleLst'])) {
        $this->circleLst = $vals['circleLst'];
      }
      if (isset($vals['noffset'])) {
        $this->noffset = $vals['noffset'];
      }
      if (isset($vals['nGetFeedNm'])) {
        $this->nGetFeedNm = $vals['nGetFeedNm'];
      }
      if (isset($vals['nLastTime'])) {
        $this->nLastTime = $vals['nLastTime'];
      }
      if (isset($vals['rid'])) {
        $this->rid = $vals['rid'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_circle_update_feeds_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->circleLst = array();
            $_size67 = 0;
            $_etype70 = unpack('c', $input->readAll(1));
            $_etype70 = $_etype70[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size67 = $val;
            for ($_i71 = 0; $_i71 < $_size67; ++$_i71)
            {
              $elem72 = null;
              $val = unpack('N', $input->readAll(4));
              $val = $val[1];
              if ($val > 0x7fffffff) {
                $val = 0 - (($val - 1) ^ 0xffffffff);
              }
              $elem72 = $val;
              $this->circleLst []= $elem72;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->noffset = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nGetFeedNm = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nLastTime = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->rid = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->rid = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->circleLst !== null) {
      if (!is_array($this->circleLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 1);
      {
        $output .= pack('c', TType::I32);
        $output .= strrev(pack('l', count($this->circleLst)));
        {
          foreach ($this->circleLst as $iter73)
          {
            $output .= pack('N', $iter73);
          }
        }
      }
    }
    if ($this->noffset !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 2);
      $output .= pack('N', $this->noffset);
    }
    if ($this->nGetFeedNm !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 3);
      $output .= pack('N', $this->nGetFeedNm);
    }
    if ($this->nLastTime !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 4);
      $output .= pack('N', $this->nLastTime);
    }
    if ($this->rid !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 5);
      $output .= pack('N2', $this->rid >> 32, $this->rid & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_get_circle_update_feeds_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'feed_FeedResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_circle_update_feeds_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new feed_FeedResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::STRUCT);
      $output .= pack('n', 0);
      $xfer += $this->success->write($output);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_del_feed_args {
  static $_TSPEC;

  public $msgid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
    }
  }

  public function getName() {
    return 'feed_service_del_feed_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->msgid = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->msgid = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->msgid !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 1);
      $output .= pack('N2', $this->msgid >> 32, $this->msgid & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_del_feed_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'feed_service_del_feed_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->success = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 0);
      $output .= pack('N', $this->success);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_get_recomm_args {
  static $_TSPEC;

  public $uid = null;
  public $circleLst = null;
  public $userLst = null;
  public $nOffset = null;
  public $nLastTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'circleLst',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'userLst',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'nOffset',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'nLastTime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['circleLst'])) {
        $this->circleLst = $vals['circleLst'];
      }
      if (isset($vals['userLst'])) {
        $this->userLst = $vals['userLst'];
      }
      if (isset($vals['nOffset'])) {
        $this->nOffset = $vals['nOffset'];
      }
      if (isset($vals['nLastTime'])) {
        $this->nLastTime = $vals['nLastTime'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_recomm_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->uid = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->uid = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->circleLst = array();
            $_size74 = 0;
            $_etype77 = unpack('c', $input->readAll(1));
            $_etype77 = $_etype77[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size74 = $val;
            for ($_i78 = 0; $_i78 < $_size74; ++$_i78)
            {
              $elem79 = null;
              $val = unpack('N', $input->readAll(4));
              $val = $val[1];
              if ($val > 0x7fffffff) {
                $val = 0 - (($val - 1) ^ 0xffffffff);
              }
              $elem79 = $val;
              $this->circleLst []= $elem79;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->userLst = array();
            $_size80 = 0;
            $_etype83 = unpack('c', $input->readAll(1));
            $_etype83 = $_etype83[1];
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $_size80 = $val;
            for ($_i84 = 0; $_i84 < $_size80; ++$_i84)
            {
              $elem85 = null;
              $arr = unpack('N2', $input->readAll(8));
              if ($arr[1] & 0x80000000) {
                $arr[1] = $arr[1] ^ 0xFFFFFFFF;
                $arr[2] = $arr[2] ^ 0xFFFFFFFF;
                $elem85 = 0 - $arr[1]*4294967296 - $arr[2] - 1;
              } else {
                $elem85 = $arr[1]*4294967296 + $arr[2];
              }
              $this->userLst []= $elem85;
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nOffset = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->nLastTime = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->uid !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 1);
      $output .= pack('N2', $this->uid >> 32, $this->uid & 0xFFFFFFFF);
    }
    if ($this->circleLst !== null) {
      if (!is_array($this->circleLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 2);
      {
        $output .= pack('c', TType::I32);
        $output .= strrev(pack('l', count($this->circleLst)));
        {
          foreach ($this->circleLst as $iter86)
          {
            $output .= pack('N', $iter86);
          }
        }
      }
    }
    if ($this->userLst !== null) {
      if (!is_array($this->userLst)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::LST);
      $output .= pack('n', 3);
      {
        $output .= pack('c', TType::I64);
        $output .= strrev(pack('l', count($this->userLst)));
        {
          foreach ($this->userLst as $iter87)
          {
            $output .= pack('N2', $iter87 >> 32, $iter87 & 0xFFFFFFFF);
          }
        }
      }
    }
    if ($this->nOffset !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 4);
      $output .= pack('N', $this->nOffset);
    }
    if ($this->nLastTime !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 5);
      $output .= pack('N', $this->nLastTime);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class feed_feed_service_get_recomm_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'feed_RecommVideo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'feed_service_get_recomm_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new feed_RecommVideo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $output .= pack('c', TType::STRUCT);
      $output .= pack('n', 0);
      $xfer += $this->success->write($output);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}


