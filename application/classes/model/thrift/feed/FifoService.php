<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

interface sub_svr_FifoServiceIf {
  public function submit_msg($source, $msgtype, $msgbody, $requestid);
  public function handle_msg($source, $msgtype, $msgbody, $msgid);
  public function last_handled_msg();
}

class sub_svr_FifoServiceClient implements sub_svr_FifoServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function submit_msg($source, $msgtype, $msgbody, $requestid)
  {
    $this->send_submit_msg($source, $msgtype, $msgbody, $requestid);
    return $this->recv_submit_msg();
  }

  public function send_submit_msg($source, $msgtype, $msgbody, $requestid)
  {
    $args = new sub_svr_FifoService_submit_msg_args();
    $args->source = $source;
    $args->msgtype = $msgtype;
    $args->msgbody = $msgbody;
    $args->requestid = $requestid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'submit_msg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('submit_msg'));
      $buff .= 'submit_msg';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_submit_msg()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'sub_svr_FifoService_submit_msg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new sub_svr_FifoService_submit_msg_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("submit_msg failed: unknown result");
  }

  public function handle_msg($source, $msgtype, $msgbody, $msgid)
  {
    $this->send_handle_msg($source, $msgtype, $msgbody, $msgid);
    return $this->recv_handle_msg();
  }

  public function send_handle_msg($source, $msgtype, $msgbody, $msgid)
  {
    $args = new sub_svr_FifoService_handle_msg_args();
    $args->source = $source;
    $args->msgtype = $msgtype;
    $args->msgbody = $msgbody;
    $args->msgid = $msgid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'handle_msg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('handle_msg'));
      $buff .= 'handle_msg';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_handle_msg()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'sub_svr_FifoService_handle_msg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new sub_svr_FifoService_handle_msg_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("handle_msg failed: unknown result");
  }

  public function last_handled_msg()
  {
    $this->send_last_handled_msg();
    return $this->recv_last_handled_msg();
  }

  public function send_last_handled_msg()
  {
    $args = new sub_svr_FifoService_last_handled_msg_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'last_handled_msg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $buff = pack('N', (0x80010000 | TMessageType::CALL));
      $buff .= pack('N', strlen('last_handled_msg'));
      $buff .= 'last_handled_msg';
      $buff .= pack('N', $this->seqid_);
      $args->write($buff);
      $this->output_->write($buff);
      $this->output_->flush();
    }
  }

  public function recv_last_handled_msg()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'sub_svr_FifoService_last_handled_msg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $ver = unpack('N', $this->input_->readAll(4));
      $ver = $ver[1];
      $mtype = $ver & 0xff;
      $ver = $ver & 0xffff0000;
      if ($ver != 0x80010000) throw new TProtocolException('Bad version identifier: '.$ver, TProtocolException::BAD_VERSION);
      $len = unpack('N', $this->input_->readAll(4));
      $len = $len[1];
      if ($len > 0x7fffffff) {
        $len = 0 - (($len - 1) ^ 0xffffffff);
      }
      $fname = $this->input_->readAll($len);
      $val = unpack('N', $this->input_->readAll(4));
      $val = $val[1];
      if ($val > 0x7fffffff) {
        $val = 0 - (($val - 1) ^ 0xffffffff);
      }
      $rseqid = $val;
      $result = new sub_svr_FifoService_last_handled_msg_result();
      $result->read($this->input_);
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("last_handled_msg failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class sub_svr_FifoService_submit_msg_args {
  static $_TSPEC;

  public $source = null;
  public $msgtype = null;
  public $msgbody = null;
  public $requestid = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'msgtype',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'msgbody',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['msgtype'])) {
        $this->msgtype = $vals['msgtype'];
      }
      if (isset($vals['msgbody'])) {
        $this->msgbody = $vals['msgbody'];
      }
      if (isset($vals['requestid'])) {
        $this->requestid = $vals['requestid'];
      }
    }
  }

  public function getName() {
    return 'FifoService_submit_msg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $this->source = unpack('c', $input->readAll(1));
            $this->source = $this->source[1];
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $this->msgtype = unpack('c', $input->readAll(1));
            $this->msgtype = $this->msgtype[1];
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $len = unpack('N', $input->readAll(4));
            $len = $len[1];
            if ($len > 0x7fffffff) {
              $len = 0 - (($len - 1) ^ 0xffffffff);
            }
            $this->msgbody = $input->readAll($len);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->requestid = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->requestid = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->source !== null) {
      $output .= pack('c', TType::BYTE);
      $output .= pack('n', 1);
      $output .= pack('c', $this->source);
    }
    if ($this->msgtype !== null) {
      $output .= pack('c', TType::BYTE);
      $output .= pack('n', 2);
      $output .= pack('c', $this->msgtype);
    }
    if ($this->msgbody !== null) {
      $output .= pack('c', TType::STRING);
      $output .= pack('n', 3);
      $output .= pack('N', strlen($this->msgbody));
      $output .= $this->msgbody;
    }
    if ($this->requestid !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 4);
      $output .= pack('N2', $this->requestid >> 32, $this->requestid & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class sub_svr_FifoService_submit_msg_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FifoService_submit_msg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->success = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->success = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 0);
      $output .= pack('N2', $this->success >> 32, $this->success & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class sub_svr_FifoService_handle_msg_args {
  static $_TSPEC;

  public $source = null;
  public $msgtype = null;
  public $msgbody = null;
  public $msgid = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'msgtype',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'msgbody',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['msgtype'])) {
        $this->msgtype = $vals['msgtype'];
      }
      if (isset($vals['msgbody'])) {
        $this->msgbody = $vals['msgbody'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
    }
  }

  public function getName() {
    return 'FifoService_handle_msg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $this->source = unpack('c', $input->readAll(1));
            $this->source = $this->source[1];
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $this->msgtype = unpack('c', $input->readAll(1));
            $this->msgtype = $this->msgtype[1];
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $len = unpack('N', $input->readAll(4));
            $len = $len[1];
            if ($len > 0x7fffffff) {
              $len = 0 - (($len - 1) ^ 0xffffffff);
            }
            $this->msgbody = $input->readAll($len);
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->msgid = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->msgid = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->source !== null) {
      $output .= pack('c', TType::BYTE);
      $output .= pack('n', 1);
      $output .= pack('c', $this->source);
    }
    if ($this->msgtype !== null) {
      $output .= pack('c', TType::BYTE);
      $output .= pack('n', 2);
      $output .= pack('c', $this->msgtype);
    }
    if ($this->msgbody !== null) {
      $output .= pack('c', TType::STRING);
      $output .= pack('n', 3);
      $output .= pack('N', strlen($this->msgbody));
      $output .= $this->msgbody;
    }
    if ($this->msgid !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 4);
      $output .= pack('N2', $this->msgid >> 32, $this->msgid & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class sub_svr_FifoService_handle_msg_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FifoService_handle_msg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $val = unpack('N', $input->readAll(4));
            $val = $val[1];
            if ($val > 0x7fffffff) {
              $val = 0 - (($val - 1) ^ 0xffffffff);
            }
            $this->success = $val;
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      $output .= pack('c', TType::I32);
      $output .= pack('n', 0);
      $output .= pack('N', $this->success);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class sub_svr_FifoService_last_handled_msg_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'FifoService_last_handled_msg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

class sub_svr_FifoService_last_handled_msg_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FifoService_last_handled_msg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    while (true)
    {
      $ftype = unpack('c', $input->readAll(1));
      $ftype = $ftype[1];
      if ($ftype == TType::STOP) {
        break;
      }
      $val = unpack('n', $input->readAll(2));
      $val = $val[1];
      if ($val > 0x7fff) {
        $val = 0 - (($val - 1) ^ 0xffff);
      }
      $fid = $val;
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $arr = unpack('N2', $input->readAll(8));
            if ($arr[1] & 0x80000000) {
              $arr[1] = $arr[1] ^ 0xFFFFFFFF;
              $arr[2] = $arr[2] ^ 0xFFFFFFFF;
              $this->success = 0 - $arr[1]*4294967296 - $arr[2] - 1;
            } else {
              $this->success = $arr[1]*4294967296 + $arr[2];
            }
          } else {
            $xfer += TProtocol::skipBinary($input, $ftype);
          }
          break;
        default:
          $xfer += TProtocol::skipBinary($input, $ftype);
          break;
      }
    }
    return $xfer;
  }

  public function write(&$output) {
    $xfer = 0;
    if ($this->success !== null) {
      $output .= pack('c', TType::I64);
      $output .= pack('n', 0);
      $output .= pack('N2', $this->success >> 32, $this->success & 0xFFFFFFFF);
    }
    $output .= pack('c', TType::STOP);
    return $xfer;
  }

}

?>
